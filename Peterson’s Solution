👫 Imagine Two Kids Sharing One Toy 🎮
There are two kids who both want to play with one video game.
They must take turns, so they don’t fight or break the game.

🛑 The Problem:
If both kids try to play at the same time, the game could crash!

So, we need a rule to make sure only one plays at a time, and they take turns nicely.

🛠️ Peterson’s Solution – The Sharing Rule
We use 2 things:
WantsToPlay[2] — A flag for each kid:

Says: "I want to play!"

Turn — Whose turn it is:

If it's your turn, the other kid waits.

📋 Simple Steps (Let’s say Kid A is process 0, Kid B is process 1):
👧 If a kid wants to play:
Says “I want to play!” → WantsToPlay[i] = true

Gives the turn to the other kid → Turn = j

Waits until:

The other kid doesn’t want to play OR

It’s my turn again

🎮 Now I play safely!
After playing:

Say “I’m done!” → WantsToPlay[i] = false

🧠 What Does This Do?
✔ It makes sure:

Only one kid plays at a time (Mutual Exclusion)

They take turns (Fairness)

No one is left out forever (No Starvation)

✅ Why is Peterson’s Solution Special?
It uses only simple variables — no locks or fancy tools!

Works only for 2 processes (or 2 kids).

It's a classic trick used in Operating Systems to teach safe sharing.

🎮 In Short:
Peterson’s Solution is like saying:

"I want to play, but if it's your turn and you also want to play, I’ll wait. Otherwise, I go!"
