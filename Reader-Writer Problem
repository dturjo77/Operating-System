📚 Imagine a Library Book
There’s one special book in the library.
Many students want to read it, and sometimes a student wants to write (change or add something) in it.

Two Types of People:
Readers 👓

Just look at the book (don’t change anything).

Many readers can read at the same time!

Writers ✍️

They edit the book.

Only one writer at a time.

No one else (not even readers!) can touch the book while writing.

⚠️ The Problem:
If a writer is writing, no one else should be reading or writing.

But if only readers are reading, they can all read together.

We need to manage who goes when, so the book doesn’t get messed up or have wrong data.

🛠️ The Solution (Using Semaphores or Locks)
We use:

Mutex 🛑 – To protect the reader count.

WriteLock 🔐 – To make sure only one writer or all readers are working safely.

📖 Simple Working Steps:
👓 Reader:
Wait (lock) to update reader count.

If first reader → block writers.

Unlock.

Read the book.

Lock again to reduce reader count.

If last reader → allow writers.

Unlock.

✍️ Writer:
Wait (lock) to block everyone.

Write the book.

Unlock (so others can go).

💡 Real-Life Example:
Readers = People visiting a library to read a book.

Writer = The librarian updating the book.

Librarian won’t let people read while editing.

But many readers can read together if the librarian isn’t editing.

✅ Goal:
Let:

Many readers read together.

Only one writer write, and no one else during that time.

Avoid data errors or conflicts!
