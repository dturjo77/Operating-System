🧁 Imagine a Cookie Box Game 🍪📦
There are two people:
Producer 👨‍🍳 — Makes cookies and puts them in a cookie box.
Consumer 😋 — Takes cookies from the box and eats them.

The Cookie Box:
The box can only hold a few cookies at a time (let’s say max 5).

So, if the box is full, the producer must wait.

If the box is empty, the consumer must wait.

⚠️ The Problem
If we don’t use any rules:

The producer might try to put a cookie when the box is full → cookie falls!

The consumer might try to eat a cookie when the box is empty → nothing to eat!

This causes errors or confusion, like in a real computer program when multiple people (threads) share a box (memory).

🛠️ The Solution (Using Semaphores)
We use 3 things to solve this safely:

Semaphore empty — Counts how many empty spots in the box.

Semaphore full — Counts how many cookies are in the box.

Semaphore mutex — Makes sure only one person uses the box at a time.

🎮 How it Works (Simple Steps)
👨‍🍳 Producer (puts cookie):
Wait until there’s at least one empty space → wait(empty)

Lock the box → wait(mutex)

Put the cookie 🍪

Unlock the box → signal(mutex)

Tell consumer there’s a cookie now → signal(full)

😋 Consumer (takes cookie):
Wait until there’s at least one cookie → wait(full)

Lock the box → wait(mutex)

Take a cookie 🍪

Unlock the box → signal(mutex)

Tell producer there's more space → signal(empty)

🧠 Why it Matters?
In computers, Producer-Consumer is a common problem when:

One program is making data (Producer),

Another is using data (Consumer),

They must share memory (the box) safely.
